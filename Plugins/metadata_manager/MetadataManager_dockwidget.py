# -*- coding: utf-8 -*-
"""
/***************************************************************************
 MetadataManagerDockWidget
                                 A QGIS plugin
 Helps users create metadata for layers following the QGIS
standards. It will persist and allow reuse of information that may be applied to more than one layer, and guide
users through creating layer-specific metadata elements for those layers in an inventory that does not have it
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2025-10-05
        git sha              : $Format:%H$
        copyright            : (C) 2025 by John Zastrow
        email                : br8kwall@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import QtGui, QtWidgets, uic
from qgis.PyQt.QtCore import pyqtSignal

from .widgets import DashboardWidget, MetadataWizard

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'MetadataManager_dockwidget_base.ui'))


class MetadataManagerDockWidget(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()

    def __init__(self, parent=None):
        """Constructor."""
        super(MetadataManagerDockWidget, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        # Database manager (set by main plugin)
        self.db_manager = None
        self.dashboard_widget = None
        self.wizard_widget = None
        self.tab_widget = None

    def set_database_manager(self, db_manager):
        """
        Set database manager instance.

        Args:
            db_manager: DatabaseManager instance
        """
        self.db_manager = db_manager

        # Remove placeholder label
        if hasattr(self, 'label'):
            self.label.hide()

        # Create tab widget
        self.tab_widget = QtWidgets.QTabWidget(self)

        # Create dashboard widget
        self.dashboard_widget = DashboardWidget(db_manager, self)

        # Create wizard widget
        self.wizard_widget = MetadataWizard(db_manager, self)

        # Connect wizard save signal to dashboard refresh
        self.wizard_widget.metadata_saved.connect(self.on_metadata_saved)

        # Add tabs
        self.tab_widget.addTab(self.dashboard_widget, "Dashboard")
        self.tab_widget.addTab(self.wizard_widget, "Metadata Editor")

        # Add tab widget to the grid layout
        self.gridLayout.addWidget(self.tab_widget, 0, 0)

        # Update dashboard display (shows connection status)
        self.dashboard_widget.update_database_display()

        # Only refresh statistics if database is connected
        if self.db_manager and self.db_manager.is_connected:
            self.dashboard_widget.refresh_statistics()

    def on_metadata_saved(self, layer_path, metadata):
        """
        Handle metadata saved event.

        Refreshes dashboard statistics when metadata is saved.

        Args:
            layer_path: Path to the layer that was updated
            metadata: Metadata dictionary (not currently used)
        """
        # Refresh dashboard to show updated statistics
        if self.dashboard_widget:
            self.dashboard_widget.refresh_statistics()

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()
