# -*- coding: utf-8 -*-
"""
/***************************************************************************
 MetadataManagerDockWidget
                                 A QGIS plugin
 Helps users create metadata for layers following the QGIS
standards. It will persist and allow reuse of information that may be applied to more than one layer, and guide
users through creating layer-specific metadata elements for those layers in an inventory that does not have it
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2025-10-05
        git sha              : $Format:%H$
        copyright            : (C) 2025 by John Zastrow
        email                : br8kwall@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import QtGui, QtWidgets, uic
from qgis.PyQt.QtCore import pyqtSignal

from .widgets import DashboardWidget, MetadataWizard, LayerListWidget, InventoryWidget

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'MetadataManager_dockwidget_base.ui'))


class MetadataManagerDockWidget(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()

    def __init__(self, parent=None):
        """Constructor."""
        super(MetadataManagerDockWidget, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        # Database manager (set by main plugin)
        self.db_manager = None
        self.inventory_widget = None
        self.dashboard_widget = None
        self.wizard_widget = None
        self.layer_list_widget = None
        self.tab_widget = None

    def set_database_manager(self, db_manager):
        """
        Set database manager instance.

        Args:
            db_manager: DatabaseManager instance
        """
        self.db_manager = db_manager

        # Remove placeholder label
        if hasattr(self, 'label'):
            self.label.hide()

        # Create tab widget
        self.tab_widget = QtWidgets.QTabWidget(self)

        # Create inventory widget (FIRST TAB - one-stop-shop)
        self.inventory_widget = InventoryWidget(db_manager, self)

        # Create dashboard widget
        self.dashboard_widget = DashboardWidget(db_manager, self)

        # Create layer list widget
        self.layer_list_widget = LayerListWidget(db_manager, self)

        # Create wizard widget
        self.wizard_widget = MetadataWizard(db_manager, self)

        # Connect signals
        self._connect_signals()

        # Add tabs (Inventory first for workflow)
        self.tab_widget.addTab(self.inventory_widget, "① Inventory")
        self.tab_widget.addTab(self.dashboard_widget, "② Dashboard")
        self.tab_widget.addTab(self.layer_list_widget, "③ Layer Browser")
        self.tab_widget.addTab(self.wizard_widget, "④ Metadata Editor")

        # Add tab widget to the grid layout
        self.gridLayout.addWidget(self.tab_widget, 0, 0)

        # Update dashboard display (shows connection status)
        self.dashboard_widget.update_database_display()

        # Only refresh statistics if database is connected
        if self.db_manager and self.db_manager.is_connected:
            self.dashboard_widget.refresh_statistics()
            self.layer_list_widget.load_layers()

    def _connect_signals(self):
        """Connect widget signals."""
        # Inventory → Database and widgets refresh
        self.inventory_widget.inventory_created.connect(self.on_inventory_created)
        self.inventory_widget.inventory_updated.connect(self.on_inventory_updated)

        # Wizard save → Dashboard refresh
        self.wizard_widget.metadata_saved.connect(self.on_metadata_saved)

        # Layer list selection → Load in wizard
        self.layer_list_widget.layer_selected.connect(self.on_layer_selected)

        # Layer list navigation → Auto-save and switch layer
        self.layer_list_widget.next_layer_requested.connect(self.on_next_layer_requested)
        self.layer_list_widget.previous_layer_requested.connect(self.on_previous_layer_requested)

    def on_inventory_created(self, gpkg_path: str, layer_name: str):
        """
        Handle inventory creation.

        Args:
            gpkg_path: Path to created GeoPackage
            layer_name: Name of inventory layer
        """
        # Connect to the new database if not already connected
        if not self.db_manager.is_connected or self.db_manager.db_path != gpkg_path:
            if self.db_manager.connect(gpkg_path):
                # Initialize Metadata Manager tables
                if self.db_manager.initialize_metadata_tables():
                    # Refresh all widgets
                    self.dashboard_widget.set_database(self.db_manager)
                    self.layer_list_widget.set_database(self.db_manager)
                    self.wizard_widget.db_manager = self.db_manager

                    # Refresh displays
                    self.dashboard_widget.refresh_statistics()
                    self.layer_list_widget.load_layers()

                    # Switch to dashboard tab to show results
                    self.tab_widget.setCurrentWidget(self.dashboard_widget)

    def on_inventory_updated(self, gpkg_path: str, layer_name: str):
        """
        Handle inventory update.

        Args:
            gpkg_path: Path to updated GeoPackage
            layer_name: Name of inventory layer
        """
        # Refresh displays
        if self.dashboard_widget:
            self.dashboard_widget.refresh_statistics()
        if self.layer_list_widget:
            self.layer_list_widget.load_layers()

        # Switch to dashboard tab to show results
        self.tab_widget.setCurrentWidget(self.dashboard_widget)

    def on_layer_selected(self, layer_path: str, layer_name: str, layer_format: str):
        """
        Handle layer selection from layer list.

        Args:
            layer_path: Full path to layer file
            layer_name: Display name of layer
            layer_format: File format (for metadata writing)
        """
        # Load layer in wizard (with smart defaults if no cached metadata)
        self.wizard_widget.set_layer(layer_path, layer_name)
        self.wizard_widget.current_file_format = layer_format

        # Switch to wizard tab
        self.tab_widget.setCurrentWidget(self.wizard_widget)

    def on_next_layer_requested(self):
        """Handle request to navigate to next layer (auto-save current first)."""
        # Save current metadata before navigation
        if self.wizard_widget.current_layer_path:
            self.wizard_widget.save_metadata()

    def on_previous_layer_requested(self):
        """Handle request to navigate to previous layer (auto-save current first)."""
        # Save current metadata before navigation
        if self.wizard_widget.current_layer_path:
            self.wizard_widget.save_metadata()

    def on_metadata_saved(self, layer_path, metadata):
        """
        Handle metadata saved event.

        Refreshes dashboard statistics and layer list when metadata is saved.

        Args:
            layer_path: Path to the layer that was updated
            metadata: Metadata dictionary (not currently used)
        """
        # Refresh dashboard to show updated statistics
        if self.dashboard_widget:
            self.dashboard_widget.refresh_statistics()

        # Refresh layer list to show updated status
        if self.layer_list_widget:
            self.layer_list_widget.load_layers()

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()
