# -*- coding: utf-8 -*-
"""
/***************************************************************************
 MetadataManager
                                 A QGIS plugin
 Helps users create metadata for layers following the QGIS
standards. It will persist and allow reuse of information that may be applied to more than one layer, and guide
users through creating layer-specific metadata elements for those layers in an inventory that does not have it
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-10-05
        git sha              : $Format:%H$
        copyright            : (C) 2025 by John Zastrow
        email                : br8kwall@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the DockWidget
from .MetadataManager_dockwidget import MetadataManagerDockWidget
from .db.manager import DatabaseManager
from .db.migrations import MigrationManager
import os.path
from qgis.PyQt.QtWidgets import QFileDialog, QMessageBox
from qgis.core import QgsMessageLog, Qgis


class MetadataManager:
    """QGIS Plugin Implementation."""

    __version__ = "0.3.1"

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'MetadataManager_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Metadata Manager')
        self.toolbar = self.iface.addToolBar(u'Metadata Manager')
        self.toolbar.setObjectName(u'MetadataManager')

        self.pluginIsActive = False
        self.dockwidget = None

        # Database management
        self.db_manager = DatabaseManager()
        self.migration_manager = MigrationManager()
        self.db_path = None


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('MetadataManager', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/MetadataManager/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'MetadataManager'),
            callback=self.run,
            parent=self.iface.mainWindow())

    #--------------------------------------------------------------------------

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        #print "** CLOSING MetadataManager"

        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)

        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        # self.dockwidget = None

        self.pluginIsActive = False


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        # Disconnect database
        if self.db_manager:
            self.db_manager.disconnect()

        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Metadata Manager'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    #--------------------------------------------------------------------------

    def select_database(self):
        """Prompt user to select inventory database."""
        settings = QSettings()
        last_db = settings.value('MetadataManager/last_database', '')

        # If we have a last database, try to use it
        if last_db and os.path.exists(last_db):
            if self.connect_to_database(last_db):
                return True

        # Show file dialog to select database
        db_path, _ = QFileDialog.getOpenFileName(
            self.iface.mainWindow(),
            self.tr("Select Inventory Database"),
            os.path.dirname(last_db) if last_db else os.path.expanduser('~'),
            self.tr("GeoPackage (*.gpkg);;All Files (*.*)")
        )

        if not db_path:
            return False

        return self.connect_to_database(db_path)

    def connect_to_database(self, db_path: str) -> bool:
        """
        Connect to database and initialize if needed.

        Args:
            db_path: Path to GeoPackage database

        Returns:
            True if connected successfully
        """
        # Connect to database
        if not self.db_manager.connect(db_path):
            QMessageBox.critical(
                self.iface.mainWindow(),
                self.tr("Database Error"),
                self.tr("Failed to connect to database:\n{}").format(db_path)
            )
            return False

        # Validate it was created by Inventory Miner
        is_valid, message = self.db_manager.validate_inventory_database()
        if not is_valid:
            QMessageBox.critical(
                self.iface.mainWindow(),
                self.tr("Invalid Database"),
                message
            )
            self.db_manager.disconnect()
            return False

        # Check if Metadata Manager tables exist
        tables_exist = self.db_manager.check_metadata_manager_tables_exist()

        if not tables_exist:
            # First time using this database with Metadata Manager
            reply = QMessageBox.question(
                self.iface.mainWindow(),
                self.tr("Initialize Database"),
                self.tr(
                    "This database does not have Metadata Manager tables.\n\n"
                    "Would you like to initialize them now?"
                ),
                QMessageBox.Yes | QMessageBox.No
            )

            if reply == QMessageBox.Yes:
                success, msg = self.db_manager.initialize_metadata_manager_tables()
                if not success:
                    QMessageBox.critical(
                        self.iface.mainWindow(),
                        self.tr("Initialization Error"),
                        msg
                    )
                    self.db_manager.disconnect()
                    return False
                QMessageBox.information(
                    self.iface.mainWindow(),
                    self.tr("Success"),
                    self.tr("Database initialized successfully!")
                )
            else:
                self.db_manager.disconnect()
                return False

        # Check for schema upgrades
        current_version = self.db_manager.get_schema_version('metadata_schema_version')

        if self.migration_manager.needs_upgrade(current_version):
            reply = QMessageBox.question(
                self.iface.mainWindow(),
                self.tr("Upgrade Database"),
                self.tr(
                    "Database schema needs upgrade from version {} to {}.\n\n"
                    "Would you like to upgrade now?\n\n"
                    "Recommendation: Back up your database first."
                ).format(current_version or "Unknown", DatabaseManager.__version__),
                QMessageBox.Yes | QMessageBox.No
            )

            if reply == QMessageBox.Yes:
                success, msg = self.migration_manager.perform_upgrade(
                    self.db_manager,
                    current_version
                )
                if not success:
                    QMessageBox.critical(
                        self.iface.mainWindow(),
                        self.tr("Upgrade Error"),
                        msg
                    )
                    self.db_manager.disconnect()
                    return False
                QMessageBox.information(
                    self.iface.mainWindow(),
                    self.tr("Success"),
                    msg
                )
            else:
                self.db_manager.disconnect()
                return False

        # Save database path to settings
        settings = QSettings()
        settings.setValue('MetadataManager/last_database', db_path)
        self.db_path = db_path

        QgsMessageLog.logMessage(
            f"Connected to database: {db_path}",
            "Metadata Manager",
            Qgis.Success
        )

        return True

    def run(self):
        """Run method that loads and starts the plugin"""

        if not self.pluginIsActive:
            self.pluginIsActive = True

            # Try to connect to last database if available (but don't require it)
            if not self.db_manager.is_connected:
                settings = QSettings()
                last_db = settings.value('MetadataManager/last_database', '')
                if last_db and os.path.exists(last_db):
                    self.connect_to_database(last_db)
                # If no last database or connection failed, that's OK
                # User can select database from the dashboard

            # dockwidget may not exist if:
            #    first run of plugin
            #    removed on close (see self.onClosePlugin method)
            if self.dockwidget == None:
                # Create the dockwidget (after translation) and keep reference
                self.dockwidget = MetadataManagerDockWidget()
                # Pass database manager to dockwidget
                self.dockwidget.set_database_manager(self.db_manager)

            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            # show the dockwidget
            self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dockwidget)
            self.dockwidget.show()
